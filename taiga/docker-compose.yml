version: "3.5"

x-environment:
  &default-back-environment
  # Database settings
  POSTGRES_DB: ${DB_NAME}
  POSTGRES_USER: ${DB_USER}
  POSTGRES_PASSWORD: ${DB_USER_PASSWORD}
  POSTGRES_HOST: taiga-db
  # Taiga settings
  TAIGA_SECRET_KEY: "${SECRET_KEY}"
  TAIGA_SITES_DOMAIN: "${URL}"
  TAIGA_SITES_SCHEME: "https"
  # Email settings. Uncomment following lines and configure your SMTP server
  EMAIL_BACKEND: "django.core.mail.backends.smtp.EmailBackend"
  DEFAULT_FROM_EMAIL: "${TAIGA_EMAIL_FROM}"
  EMAIL_USE_TLS: "${TAIGA_EMAIL_USE_TLS}"
  # EMAIL_USE_SSL: "False"
  EMAIL_HOST: "${TAIGA_EMAIL_HOST}"
  EMAIL_PORT: ${TAIGA_EMAIL_PORT}
  EMAIL_HOST_USER: "${TAIGA_EMAIL_USER}"
  EMAIL_HOST_PASSWORD: "${TAIGA_EMAIL_PASS}"
  # Rabbitmq settings
  # Should be the same as in taiga-async-rabbitmq and taiga-events-rabbitmq
  RABBITMQ_USER: ${RABBIT_USER}
  RABBITMQ_PASS: ${RABBIT_PASSWORD}
  # Telemetry settings
  ENABLE_TELEMETRY: "${TAIGA_ENABLE_TELEMETRY}"

x-volumes:
  &default-back-volumes
  - ${ROOT_DIR}/static:/taiga-back/static
  - ${ROOT_DIR}/media:/taiga-back/media
  # - ./config.py:/taiga-back/settings/config.py


services:
  taiga-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: taiga-db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_USER_PASSWORD}
    volumes:
      - type: bind
        target: /var/lib/postgresql/data
        source: ${ROOT_DIR}/db
    networks:
      - backend

  taiga-back:
    image: taigaio/taiga-back:${TAIGA_VERSION}
    container_name: taiga-back
    environment: *default-back-environment
    volumes: *default-back-volumes
    networks:
      - backend
    depends_on:
      - taiga-db
      - taiga-events-rabbitmq
      - taiga-async-rabbitmq

  taiga-async:
    image: taigaio/taiga-back:${TAIGA_VERSION}
    container_name: taiga-async
    entrypoint: ["/taiga-back/docker/async_entrypoint.sh"]
    environment: *default-back-environment
    volumes: *default-back-volumes
    networks:
      - backend
    depends_on:
      - taiga-db
      - taiga-back
      - taiga-async-rabbitmq

  taiga-async-rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: taiga-async-rabbitmq
    environment:
      RABBITMQ_ERLANG_COOKIE: secret-erlang-cookie
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: taiga
    networks:
      - backend

  taiga-front:
    image: taigaio/taiga-front:${TAIGA_VERSION}
    container_name: taiga-front
    environment:
      TAIGA_URL: "https://${URL}"
      TAIGA_WEBSOCKETS_URL: "wss://${URL}"
    networks:
      - backend
    # volumes:
    #   - ./conf.json:/usr/share/nginx/html/conf.json

  taiga-events:
    image: taigaio/taiga-events:${TAIGA_EVENTS_VERSION}
    container_name: taiga-events
    environment:
      RABBITMQ_USER: ${RABBIT_USER}
      RABBITMQ_PASS: ${RABBIT_PASSWORD}
      TAIGA_SECRET_KEY: "${SECRET_KEY}"
    networks:
      - backend
    depends_on:
      - taiga-events-rabbitmq

  taiga-events-rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: taiga-events-rabbitmq
    environment:
      RABBITMQ_ERLANG_COOKIE: secret-erlang-cookie
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: taiga
    networks:
      - backend

  taiga-protected:
    image: taigaio/taiga-protected:${TAIGA_PROTECTED_VERSION}
    container_name: taiga-protected
    environment:
      MAX_AGE: 360
      SECRET_KEY: "${SECRET_KEY}"
    networks:
      - backend

  taiga-gateway:
    image: nginx:1.19-alpine
    container_name: taiga-gateway
    volumes:
      - ${ROOT_DIR}/gateway/taiga.conf:/etc/nginx/conf.d/default.conf
      - ${ROOT_DIR}/static:/taiga/static
      - ${ROOT_DIR}/media:/taiga/media
    labels:
      # Reverse proxy and certificate
      - "traefik.enable=true"
      - "traefik.docker.network=reverse-proxy"
      # Website Configuration
      - "traefik.http.routers.${SERVICE_NAME}.rule=Host(`${URL}`)"
      - "traefik.http.routers.${SERVICE_NAME}.tls.certresolver=myresolver"
      - "traefik.http.routers.${SERVICE_NAME}.entrypoints=websecure"
      - "traefik.http.routers.${SERVICE_NAME}.service=${SERVICE_NAME}"
      - "traefik.http.routers.${SERVICE_NAME}.tls=true"
      - "traefik.http.services.${SERVICE_NAME}.loadbalancer.server.port=80"
    networks:
      - backend
      - reverse-proxy
    depends_on:
      - taiga-front
      - taiga-back
      - taiga-events


networks:
  backend:
    name: taiga
  reverse-proxy:
    external: true
